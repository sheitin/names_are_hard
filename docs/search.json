[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I love R and Rstudio for many reasons, the number one being the community. I hope this blog can be a positive contribution to the R community from which I’ve gained so much.\nThe name for the blog, “Names Are Hard,” is a nod to the blinking cursor moment when you are compelled to summarize a piece of work in a single word or phrase. In coding, this moment is ubiquitous as it arises each time you create a variable, start a new project, or save a file1. You want the name to be short so that it is easy to type, but not so short as to be uninterpretable2. You want it to be specific to accurately characterize its contents, but you also want to leave space for generalization and reusability3.\nGood names have the illusion of having appeared effortlessly. “Of course you would name it that, what else in the world would you name it?” And yet, naming well usually requires a good deal of thought and often a willingness to rename and rework. So, when the cursor starts blinking, remember to take a moment to acknowledge that you confront a difficult and important task because Names Are Hard.\n\n\n\nFootnotes\n\n\nor start a blog…hypothetically.↩︎\nas a novice Python user, import pandas as pd requires some additional mental energy↩︎\noh how satisfying to wrap up repeated codes in a meaningful function↩︎"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Testing Out Quarto Blog",
    "section": "",
    "text": "Don’t mind me, just giving it a go with the Quarto blog capability."
  },
  {
    "objectID": "posts/post-with-code/index.html#check-out-this-plot",
    "href": "posts/post-with-code/index.html#check-out-this-plot",
    "title": "Testing Out Quarto Blog",
    "section": "Check Out This Plot!",
    "text": "Check Out This Plot!\n\npenguins %>%\n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point()"
  },
  {
    "objectID": "posts/family_feud/index.html",
    "href": "posts/family_feud/index.html",
    "title": "Family Feud - NYT Crossword Edition",
    "section": "",
    "text": "If there’s one thing that unites my family, it’s a love of food1. If there are two things that unite my family, they are a love of food and a love of puzzles. So, when I saw that tidytuesday had wrangled a set of crossword clues and answers, I knew what I had to do.\nI emailed my family members and asked them to submit one guess as to what they thought was the most common 4-letter crossword answer."
  },
  {
    "objectID": "posts/family_feud/index.html#bum-bum-ba-da-buuuuum---results",
    "href": "posts/family_feud/index.html#bum-bum-ba-da-buuuuum---results",
    "title": "Family Feud - NYT Crossword Edition",
    "section": "Bum Bum Ba Da Buuuuum - Results",
    "text": "Bum Bum Ba Da Buuuuum - Results\nThe plot below shows the results of our challenge. The y-axis is the percentile for how common each 4-letter word is. So, if a word is in the 90th percentile, then it is more common than 90% of all 4-letter words (that appeared in at least one crossword puzzle).\n\n\nShow the code\nlibrary(ggrepel)\nlibrary(scales)\n\n family_answers_pctile %>%\n  ggplot(aes(y = pctile)) +\n  geom_vline(xintercept = 0) +\n  geom_point(aes(x = 0), alpha = .3, stroke = 0) +\n  # stat_ecdf() +\n  geom_label_repel(aes(label = answer, x = 0), max.overlaps = 20, fill = \"light blue\") +\n  scale_y_continuous(labels = label_percent(), limits = c(0,1)) +\n  theme_light() +\n  theme(axis.text.x=element_blank(),\n        axis.ticks=element_blank(),\n        axis.title.x=element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank())  +\n  labs(y = \"Answer Percentile\")\n\n\n\n\n\nFamily Guesses and Their Resulting Percentiles\n\n\n\n\nA keen eye will note that the top answer, “WELL”, is at the 100th Percentile. That’s right, one family member chose the absolute most common 4-letter crossword clue! It’s no wonder that this is also the person who made a living out of playing poker through serious study and computer simulation."
  },
  {
    "objectID": "posts/family_feud/index.html#try-for-yourself",
    "href": "posts/family_feud/index.html#try-for-yourself",
    "title": "Family Feud - NYT Crossword Edition",
    "section": "Try For Yourself",
    "text": "Try For Yourself\nType an answer in ALL CAPS in the text box in the first column below. This is limited to 4-letter answers. The time range is 2012-12-27 to 2021-09-12, though the data appears to be most complete between 2017 and 2021.\n\n\nShow the code\nlibrary(reactable)\nanswers_pctile %>%\n  mutate(percentile = scales::percent(pctile, accuracy = .01)) %>%\n  select(`Answer` = answer, \n         `Answer Percentile` = percentile, \n         `No. of Puzzles in Which Answer Appeared` = n_appearances) %>%\n  reactable::reactable(filterable = TRUE, defaultPageSize = 1)"
  },
  {
    "objectID": "posts/set-up-quarto-blog-rstudio-cloud/index.html",
    "href": "posts/set-up-quarto-blog-rstudio-cloud/index.html",
    "title": "Tip - Setting Up A Quarto Blog With RStudio Cloud",
    "section": "",
    "text": "Having just set up a Quarto blog using RStudio Cloud, I thought I’d share one challenge and work-around that was particularly useful.\nThe published instructions for creating a Quarto blog start with the following terminal command:\nThis command works beautifully, creating all of the files you will need for a Quarto blog as well as a related RStudio Project file in the myblog directory. From what I can tell, this assumes that you are in an RStudio session that does not have an active project.\nHowever, in the RStudio Cloud environment, the command line is not accessible outside of an RStudio Project. So, if you try the above command, the result will be a new folder with your quarto blog files and an RStudio Project file inside of your existing RStudio project. If you are using Github to deploy the blog, Github won’t be able to find the docs folder since it will be one level deeper than it is expecting. Oh no!\nLuckily, there is an easy fix: omit the new directory name from the terminal command. This will create the files in your root directory, which is the project directory you are already in. The new command becomes:\nHappy blogging!"
  },
  {
    "objectID": "posts/set-up-quarto-blog-rstudio-cloud/index.html#tldr---how-to-start-a-quarto-blog-in-rstudio-cloud",
    "href": "posts/set-up-quarto-blog-rstudio-cloud/index.html#tldr---how-to-start-a-quarto-blog-in-rstudio-cloud",
    "title": "Tip - Setting Up A Quarto Blog With RStudio Cloud",
    "section": "TLDR - How to Start a Quarto Blog in RStudio Cloud",
    "text": "TLDR - How to Start a Quarto Blog in RStudio Cloud\nTo recap, here are the steps: 1) Log into your RStudio Cloud 2) Start a new project 3) Enter the following command into the terminal: quarto create-project --type website:blog"
  },
  {
    "objectID": "posts/set-up-quarto-blog-rstudio-cloud/index.html#addendum",
    "href": "posts/set-up-quarto-blog-rstudio-cloud/index.html#addendum",
    "title": "Tip - Setting Up A Quarto Blog With RStudio Cloud",
    "section": "Addendum",
    "text": "Addendum\nIf, like me, you got going with your blog work following the published instructions before you realized there was an issue with the file structure, there is a command that will sort things out for you:\ncp -r myblog/* .\nThis will copy everything inside of the myblog folder to the project root directory.\nNext, you will need to delete the myblog folder since you’ve already moved its contents."
  },
  {
    "objectID": "posts/my-first-package/index.html",
    "href": "posts/my-first-package/index.html",
    "title": "My First Package",
    "section": "",
    "text": "The first package I wrote myself was terribly unexciting except for one thing: it solved a package management problem problem that was common for new or intermediate R users at my organization."
  },
  {
    "objectID": "posts/my-first-package/index.html#background---our-rstudio-server-setup",
    "href": "posts/my-first-package/index.html#background---our-rstudio-server-setup",
    "title": "My First Package",
    "section": "Background - Our RStudio Server Setup",
    "text": "Background - Our RStudio Server Setup\nWe have a fantastic team that manages our RStudio Server environment. They implement a system that provides the flexibility for folks to manage their own package libraries as well as to use a set of centrally-managed system-level packages. The system-level package library is updated each night by a script that checks for new versions of an admin-specified set of packages and installs an update if one exists.\nIn the user environment, when a user calls a package with library(a_package), .libPaths() will first look in a directory of user-managed packages. These are any packages that a user installed explicitly using install.packages() or equivalent.\nIf the package is not found in the user-managed directory, then the environment will move to the directory of system-level packages.\nA problem can arise when a user unknowingly installs a package that is a dependency for a package that is managed at the system level. While this may be fine at first, over time the system-level packages will be automatically kept current and the system-level package may depend on a newer version of the other package than what the user installed. The updated version of the dependency package will have been automatically updated in the system repository, but the user may forget to update their own version. So, when the user calls the system-managed package, .libPaths() will grab the version of the dependency package that is in their personal directory and R will throw an error.\nThis can be very confusing to users who are not used to managing their own package libraries. In fact, one of the wonderful things about our RStudio environment is that users can get really far without having to worry about package management or even know about install.packages(). They can just get coding!"
  },
  {
    "objectID": "posts/my-first-package/index.html#an-evolving-solution",
    "href": "posts/my-first-package/index.html#an-evolving-solution",
    "title": "My First Package",
    "section": "An Evolving Solution",
    "text": "An Evolving Solution\nFor a while, my solution was to write a script that checks the system-level package directory for packages that are also installed in a user’s package directory and then delete the version in the user’s package directory. I shared this script in a code block in Slack that users could paste into the command line and run. In fact, I pinned a message with this code block in Slack so that I could find it and share it easily.\nThen, one day, one of my colleagues had an idea: what if I wrapped the script up as a function and wrote it into a package? Then, we could include the package in the system libraries and when folks needed it, they could simply call the function from the command line. Plus, we could include all of the documentation about in the package to explain what it did (for those who were interested), which would be a lot nicer to look at than a Slack thread.\nBut, I had never written a package before! Little did I know, there was a whole new world waiting for me, lovingly constructed to get users like me from “It’d be really cool to write a package” to “I just wrote my first package!” with minimal pain.\nEnter “R Packages” by Hadley Wickham and Jenny Bryan.\n\nThe R Package Development World\nThe best thing about “R Packages” is that it prods users to keep a healthy problem-solving attitude and to be gentle with themselves while they wrestle with challenging technical problems. The end of the introduction sets the tone:\n\nWriting a package can seem overwhelming at first. So start with the basics and improve it over time. It doesn't matter if your first version isn't perfect as long as the next version is better. - R Packages\n\nThe second best thing about “R Packages” is the accompanying package-writing packages that just make things work. devtools, usethis, and testthat are thoughtfully curated to support the workflows described in “R Packages” while providing flexibility and room for growth for advancing users.\nThe third best thing about “R Packages” is that all of it (the book, the packages, the RStudio IDE) is free and open source."
  },
  {
    "objectID": "posts/my-first-package/index.html#solution-implemented",
    "href": "posts/my-first-package/index.html#solution-implemented",
    "title": "My First Package",
    "section": "Solution Implemented",
    "text": "Solution Implemented\nAnd so, armed with fantastic documentation, technical support, and a full-day meeting with myself, I wrote my first package.\nV0.1 of libfilesmgr has one function: clean_personal_libs(). It has been used by probably a dozen users over the last couple years and there are no plans to expand the scope or enrich its function."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Names Are Hard",
    "section": "",
    "text": "packages\n\n\n\n\n\n\n\n\n\n\n\nOct 1, 2022\n\n\nSimon Heitin\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nquarto\n\n\nhow-to\n\n\n\n\n\n\n\n\n\n\n\nSep 29, 2022\n\n\nSimon Heitin\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntidytuesday\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\nSep 28, 2022\n\n\nSimon Heitin\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nquarto\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\nSep 25, 2022\n\n\nSimon Heitin\n\n\n\n\n\n\nNo matching items"
  }
]