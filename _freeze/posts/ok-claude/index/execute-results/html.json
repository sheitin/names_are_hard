{
  "hash": "efd77ca10d8ee545bb95ee1782a387a7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Ok Claude, Come on In\"\ndate: \"2025-05-23\"\nauthor: \"Simon Heitin\"\ncategories: [ai]\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n    toc: true\n    toc-location: right\nexecute:\n  message: false\n  warning: false\n---\n\n\n\nRecently, I have been playing with AI tools, trying out different ways of integrating them into my workflow. My most comfortable environment is using the RStudio IDE, Quarto, and the tidyverse to wrangle data and build plots to tell a story. After quite a bit of trial and error, I landed on the following additions to this setup:\n\n- [Ellmer](https://ellmer.tidyverse.org/) for programmatic access to the LLM (Claude-3-7-Sonnet)\n- The [btw](https://github.com/posit-dev/btw) package for supplementing prompts with information about my active R environment\n- An Anthropic API key with $5 in an account\n\nAs with any new tool, the best way to know if it is useful is to try to use it to solve problems.\n\nSo, I picked up the latest [Tidy Tuesday](https://github.com/rfordatascience/tidytuesday) dataset and did some Exploratory Data Analysis (EDA). I didn't start with the LLM right away though. I am pretty quick at exploring data with the [tidyverse](https://www.tidyverse.org/) and building plots using [ggplot2](https://ggplot2.tidyverse.org/). So, I used my normal workflow (non-AI-assisted) to decide what I wanted to convey with my plot and get to iterating.\n\nAnd this is where I hit a familiar problem. There are endless options for tweaking plots, and with even a dash of perfectionist tendency, you can get stuck making endless minor adjustments. After trying my tenth different combination of height/width ratio, I asked the LLM for help breaking out of this cycle.\n\nI pointed it to my code and prompted: \"give me four different versions of this plot.\" It responded within about 10 seconds and it took me a minute or two to review the results.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggtext)\n\n# Grab data from GH\nvesuvius <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-05-13/vesuvius.csv') |>\n  select(-type, -area) |>  # is always \"earthquake\" and \"Mount Vesuvius\" \n  mutate(time_unix = time - ymd_hms(\"1970-01-01 00:00:00\"),\n         obs_day = as.Date(time)) |>\n  filter(obs_day >= ymd(\"2013-01-01\")) # data is very sparse before this\n\n# Fill in missing dates\nall_days <- tibble(\n  obs_day = seq.Date(from = ymd(\"2013-01-01\"), to = ymd(\"2024-12-31\"), by = \"day\")\n  )\n\n# for date breaks\nbreaks <- as.Date(ymd(c(\"2013-01-01\",\n                        #\"2014-01-01\", \n                        \"2015-01-01\",\n                        #\"2016-01-01\",\n                        \"2017-01-01\",\n                        #\"2018-01-01\",\n                        \"2019-01-01\",\n                        #\"2020-01-01\",\n                        \"2021-01-01\",\n                        #\"2022-01-01\",\n                        \"2023-01-01\",\n                        #\"2024-01-01\",\n                        \"2025-01-01\")))\n\n# Aggregated stats\nvesuvius_agg <- vesuvius |>\n  summarize(n = n(),\n            .by = obs_day) |>\n  right_join(all_days, by = \"obs_day\") |>\n  mutate(n = replace_na(n,0)) |>\n  arrange(desc(n)) |>\n  mutate(top_ten = case_when(\n    row_number() <= 10 ~ \"top\",\n    row_number() > 10 ~ \"not top\"))\n\n# set up our colors\npop_color <- \"orange\"\ncolor_list <- c(\"top\" = pop_color,\n  \"not top\" = \"grey\")\n\ndaily_plot <- vesuvius_agg |>\n  ggplot(aes(x = obs_day, y = n)) +\n  geom_col(aes(fill = top_ten)) +\n  geom_text(data = ~ filter(.x, top_ten == \"top\"), \n            aes(label = obs_day),\n            size = 3,\n            hjust = -.1,\n            angle = 10,\n            color = pop_color) +\n  scale_fill_manual(values = color_list) +\n  theme_dark() +\n  labs(y = \"# of Earthquakes\",\n       x = \"Date\",\n       title = \"Earthquake Activity Near Mt Vesuvius Over Time\",\n       subtitle = \"<span style = 'color: DarkOrange;'>Top Ten Most Active Days</span> \",\n       alt = \"A bar plot of with the number of daily earthquakes near Mt. Vesuvius from 2013 to 2025. The top ten most active days are colored orange and they range from about 50 earthquakes to about 150 earthquakes. The rest of the days are in grey and they are much lower, mostly around 1 or 2.\") +\n  scale_x_date(breaks = breaks,\n               date_labels = \"%Y\") +\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major = element_blank(),\n        plot.subtitle = ggtext::element_markdown()) +\n  guides(fill = \"none\")\n\ndaily_plot\n```\n\n::: {.cell-output-display}\n![My Original Plot](index_files/figure-html/orig-plot-1.png){width=672}\n:::\n:::\n\n\n\n\n## Results\nThree of the AI-generated plots were time series plots very similar to mine. One added a kernel density, one other removed some text labels, and the third one faceted the time series by year. \n\nThe fourth AI-generated plot was a calendar heatmap. It didn't strike me as promising, but I appreciated that it was different.\n\n## Four AI-Generated Variations\n\nBelow I tried to keep the raw AI results intact as much as possible. \nI did some formatting so that they did display similarly to what I saw when I initially ran them in the RStudio IDE.\n\n:::{.panel-tabset}\n\n### Version 1\n\n#### Version 1: Basic Time Series Plot of Daily Seismic Events\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Version 1: Basic time series plot\ndaily_plot_v1 <- ggplot(vesuvius_agg, aes(x = obs_day, y = n)) +\n  geom_line(color = \"grey50\") +\n  geom_point(aes(color = top_ten), size = 1) +\n  scale_color_manual(values = color_list) +\n  scale_x_date(breaks = breaks, date_labels = \"%Y\") +\n  labs(title = \"Daily Seismic Events at Mount Vesuvius (2013-2024)\",\n       x = \"Date\", \n       y = \"Number of Events\",\n       color = \"Event Count\") +\n  theme_minimal()\n\ndaily_plot_v1\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n\n### Version 2\n\n#### Version 2: Enhanced Time Series with Highlighted Periods and Smoother\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Version 2: Enhanced with smoother and highlighted periods\ndaily_plot_v2 <- ggplot(vesuvius_agg, aes(x = obs_day, y = n)) +\n  geom_line(color = \"grey70\") +\n  geom_smooth(method = \"loess\", span = 0.1, se = FALSE, color = \"steelblue\") +\n  geom_point(data = subset(vesuvius_agg, top_ten == \"top\"), \n             aes(color = top_ten), size = 2) +\n  scale_color_manual(values = color_list) +\n  geom_text(data = ~ filter(.x, top_ten == \"top\"), \n            aes(label = obs_day),\n            size = 3,\n            hjust = -.1,\n            angle = 10,\n            color = pop_color) +\n  scale_x_date(breaks = breaks, date_labels = \"%Y\") +\n  labs(title = \"Vesuvius Seismic Activity (2013-2024)\",\n       x = \"Date\", \n       y = \"Number of Events\") +\n  theme_light() +\n  theme(legend.position = \"bottom\",\n        plot.subtitle = ggtext::element_markdown()) +\n  guides(color = \"none\")\n\ndaily_plot_v2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n### Version 3\n\n#### Version 3: Faceted Plot by Year with Density Ridges\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Version 3: Faceted by year with summarized data\ndaily_plot_v3 <- ggplot(vesuvius_agg, aes(x = obs_day, y = n)) +\n  geom_col(aes(fill = top_ten), width = 1) +\n  scale_fill_manual(values = color_list) +\n  facet_wrap(~ format(obs_day, \"%Y\"), scales = \"free_x\", ncol = 2) +\n  labs(title = \"Yearly Seismic Activity at Vesuvius\",\n       x = \"Date within Year\", \n       y = \"Number of Events\",\n       fill = \"Activity Level\") +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\ndaily_plot_v3\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n### Version 4\n\n#### Version 4: Heatmap Calendar View\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Version 4: Calendar heatmap view\n# Create year and month variables\nvesuvius_agg_cal <- vesuvius_agg %>%\n  mutate(\n    year = lubridate::year(obs_day),\n    month = lubridate::month(obs_day),\n    day = lubridate::day(obs_day)\n  )\n\ndaily_plot_v4 <- ggplot(vesuvius_agg_cal, \n       aes(x = day, y = month, fill = n)) +\n  geom_tile(color = \"white\", size = 0.1) +\n  scale_fill_gradient(low = \"white\", high = pop_color) +\n  facet_wrap(~ year, ncol = 3) +\n  scale_y_continuous(breaks = 1:12,\n                    labels = month.abb,\n                    trans = \"reverse\") +\n  labs(title = \"Calendar View of Vesuvius Seismic Activity\",\n       x = \"Day of Month\", \n       y = \"Month\",\n       fill = \"Event Count\") +\n  theme_minimal() +\n  theme(panel.grid = element_blank())\n\ndaily_plot_v4\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n### Lots of Small Changes\nI knew that LLMs were non-deterministic and to be ready for possibly wild results. But, what I hadn't considered was that it would also make a lot of smaller, somewhat arbitrary changes. Some examples:\n\n- The label \"# of Earthquakes\" became \"Number of Events\"\n- The title \"Earthquake Activity Near Mt Vesuvius Over Time\" became \"Vesuvius Seismic Activity (2013-2024)\" or \"Daily Seismic Events at Mount Vesuvius (2013-2024)\"\n- It summarily dropped the Alt Text label\n\nThe most helpful result: One of the LLM-generated time series plots added points to the observations I wanted to highlight, and they looked nice. In my version, I used color and had a text callout but not points. A small change, but I liked it.\n\n### One Funky Code Smell\nI actually ran the prompt a couple of times and the results were fairly similar each time with one exception: one version wrapped each of the plot objects in a function call. This is a fine practice in general, but the LLM made the strange  choice of adding `library` calls inside of each function. \n\nThe sneaky thing about this is that the code will run, but it's not a pattern any seasoned R programmer would recommend. A new R programmer, though, might be tripped up. \n\nMore than anything, this was a reminder to be skeptical of the LLM output, especially when doing tasks that aren't yet part of your expertise. In those cases, returning to documentation you trust could be a good way to check any LLM-generated patterns that look suspect.\n\n## Making Good Choices\n\nUpon reflection, a few of the choices I made for this project made it likely to succeed:\n\n1. **I chose an area that I already know well** - Tidyverse wrangling and ggplot are my bread and butter. So, I was able to quickly evaluate what the LLM came up with. I could also make changes to it, knowing that I could fix anything that broke without too much trouble.\n\nIn [a recent LinkedIn post](https://www.linkedin.com/posts/emollick_the-most-obvious-lowest-risk-way-to-use-activity-7329918901478170624-Icqy?utm_source=share&utm_medium=member_desktop&rcm=ACoAABOk3REBCkZ8ASK3d5kPFxAZIDiE95ykz4M), Ethan Mollick recommended this approach:\n\n> The most obvious, lowest risk way to use AI (and to get a sense of how good it is in areas that matter to you) is to ask it for second opinions in your area of expertise.\n\n2. **I chose a task that was verifiable** - asking it to generate code meant that I could run the code to test it.\n\nWith code, you can integrate the result into your existing product. With writing that can be harder.\n\t\n3. **I chose a task that was scoped** - by the time I pulled in the LLM, I already knew the point I wanted to convey. I was looking for options to convey it.\n\nRelatedly, I limited the number of turns with the LLM. I took what the LLM had to offer with some limited prompting and then got back to my normal workflow. \n\n4. **I configured my environment before starting** - I used the [Ellmer](https://ellmer.tidyverse.org/index.html) and [btw](https://github.com/posit-dev/btw) packages to make it easy to give the LLM my full context.\n\nI spent a whole lot of time researching different workflows and setups. This could be another set of posts and I will link below to resources that I used to do this.\n\nAndrew Holz mad a related recommendation in his excellent blog post [\"Running AI/LLM Hackathons at Posit: What We’ve Learned\"](https://posit.co/blog/llm-hackathon-lessons-learned/):\n\n>Interacting with LLMs programmatically—rather than through a chat interface or as code completion—provides deeper insight into both the challenges and the possibilities.\n\n## What's Next\n\nI am looking to grow as a Python programmer, and I wonder how well AI can assist in an area where I don't have quite the same fluency. The packages and plugins I used here (`Ellmer` and `btw`) are R-specific, so I will try different Python-specific options. \n\nI have been playing with [Continue](https://marketplace.visualstudio.com/items?itemName=Continue.continue) writing Python in the [Positron IDE](https://positron.posit.co/) and have had good results. One feature I like is that the Continue plugin presents code changes as actual diffs for you to accept or reject rather than immediately writing over your code. \n\nI have an inkling that change management is important since the LLM makes it easy to generate new code and edit existing code. It will be useful to be able to get back to a state where you know things work. I would like to try using a more deliberate git strategy to help here: frequent commits and a willingness to revert. While this would be adding yet another technology to the mix, git is very mature and I am pretty comfortable with it. \n\nOnward!\n\nSimon",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}